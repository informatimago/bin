#!/usr/bin/clisp -ansi -q -E iso-8859-1
;;;; -*- mode:lisp; coding:iso-8859-1 -*-

;; Replaces any sequences of non alphanumeric or dot character in the
;; arguments by a single dash.

(defun split-string-if (predicate string &key remove-empty-subseqs)
  "
NOTE:   current implementation only accepts as separators
        a string containing literal characters.
"
  (let ((chunks  '())
        (position 0)
        (nextpos  0)
        (strlen   (length string)))
    (loop :while (< position strlen) :do
       (loop :while (and (< nextpos strlen)
                         (not (funcall predicate (aref string nextpos)))) :do
          (incf nextpos))
       (push (subseq string position nextpos) chunks)
       (setf position (1+ nextpos)
             nextpos  position))
    (nreverse chunks)))



(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter +character-foldings+
    '( ("A" "ÀÁÂÃÄÅ") ("AE" "Æ") ("C" "Ç") ("E" "ÈÉÊË") ("I" "ÌÍÎÏ") 
       ("ETH" "Ð") ("N" "Ñ") ("O" "ÒÓÔÕÖØ") ("U" "ÙÚÛÜ") ("Y" "Ý")
       ("TH" "Þ") ("ss" "ß") ("a" "àáâãäå") ("ae" "æ") ("c" "ç")
       ("e" "èéêë") ("i" "ìíîï") ("eth" "ð") ("n" "ñ") ("o" "òóôõöø")
       ("u" "ùúûü") ("u" "ýÿ") ("th" "þ")))
  (defun character-folding (character)
    (car (member (character character) +character-foldings+ 
                 :test (function position) :key (function second))))
  (defun character-fold (character)
    "
RETURN: A string containing the character without accent 
        (for accented characters), or a pure ASCII form of the character.
"
    (car (character-folding character)))
  (defun string-fold (string)
    (apply (function concatenate) 'string
           (map 'list (lambda (ch) (let ((conv (character-folding ch)))
                                (if conv
                                  (first conv)
                                  (list ch)))) string))))


(defun clean-name (name)
  (format nil "~{~A~^-~}"
          (split-string-if (lambda (char) (not (or (alphanumericp char)
                                              (char= char #\/)
                                              (char= char #\.))))
                           (string-fold (string-downcase name))
                           :remove-empty-subseqs t)))

(defun main (argv)
  (dolist (arg argv)
    (princ (clean-name arg))
    (terpri)))

(main ext:*args*)


