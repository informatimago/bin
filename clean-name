#!/usr/bin/clisp -ansi -q -E iso-8859-1
;;;; -*- mode:lisp; coding:iso-8859-1 -*-

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;
;; Warning: processes iso-8859-1 not utf-8 arguments! ;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;

;; Replaces any sequences of non alphanumeric or dot character in the
;; arguments by a single dash.

(defun split-string-if (predicate string &key remove-empty-subseqs)
  "
NOTE:   current implementation only accepts as separators
        a string containing literal characters.
"
  (let ((chunks  '())
        (position 0)
        (nextpos  0)
        (strlen   (length string)))
    (loop :while (< position strlen) :do
       (loop :while (and (< nextpos strlen)
                         (not (funcall predicate (aref string nextpos)))) :do
          (incf nextpos))
       (push (subseq string position nextpos) chunks)
       (setf position (1+ nextpos)
             nextpos  position))
    (nreverse chunks)))




(defparameter *character-foldings*
  '(("A" "ÀÁÂÃÄÅ") ("AE" "Æ") ("C" "Ç") ("E" "ÈÉÊË") ("I" "ÌÍÎÏ") 
    ("ETH" "Ð") ("N" "Ñ") ("O" "ÒÓÔÕÖØ") ("U" "ÙÚÛÜ") ("Y" "Ý")
    ("TH" "Þ") ("ss" "ß") ("a" "àáâãäå") ("ae" "æ") ("c" "ç")
    ("e" "èéêë") ("i" "ìíîï") ("eth" "ð") ("n" "ñ") ("o" "òóôõöø")
    ("u" "ùúûü") ("u" "ýÿ") ("th" "þ")))

(defun character-folding (character)
  (car (member (character character) *character-foldings*
               :test (function position) :key (function second))))

(defun character-fold (character)
  "
RETURN: A string containing the character without accent 
        (for accented characters), or a pure ASCII form of the character.
"
  (car (character-folding character)))

(defun string-fold (string)
  (apply (function concatenate) 'string
         (map 'list (lambda (ch) (let ((conv (character-folding ch)))
                                   (if conv
                                       (first conv)
                                       (list ch)))) string)))


(defun clean-name (name)
  (format nil "~{~A~^-~}"
          (split-string-if (lambda (char) (not (or (alphanumericp char)
                                                   (char= char #\/)
                                                   (char= char #\.))))
                           (string-trim "-" (string-fold (string-downcase name)))
                           :remove-empty-subseqs t)))





(defparameter *diacritics* '((#x80
                              "AÀ" "EÈ" "IÌ" "OÒ" "UÙ"
                              "aà" "eè" "iì" "oò" "uù")
                             (#x81
                              "AÁ" "EÉ" "IÍ" "OÓ" "UÜ" "YÝ"
                              "aá" "eé" "ií" "oó" "uü" "yý")
                             (#x82
                              "AÂ" "EÊ" "IÎ" "OÔ" "UÛ"
                              "aâ" "eê" "iî" "oô" "uû")
                             (#x88
                              "AÄ" "EË" "IÏ" "OÖ" "UÜ"
                              "aä" "eë" "iï" "oö" "uü")
                             (#xa7
                              "CÇ" "cç")))

(defun combine-diacritic (ch diacritic)
  (let ((dia (find ch diacritic :key (lambda (dia) (aref dia 0)))))
    (if dia
        (aref dia 1)
        ch)))

(defun translate-diacritics (text)
  (let ((escape (code-char #xcc)))
    (if (find escape text)
        (let ((out (make-array (length text) :fill-pointer 0 :element-type 'character)))
          (loop :with state = :normal
                :for ch :across text
                :do (case state
                      ((:normal) (if (char= escape ch)
                                     (setf state :escaped)
                                     (vector-push ch out)))
                      ((:escaped) (let ((diacritic (cdr (assoc (char-code ch) *diacritics*))))
                                    (when diacritic 
                                      (setf (aref out (1- (length out)))
                                            (combine-diacritic (aref out (1- (length out))) diacritic)))
                                    (setf state :normal)))))
          out)
        text)))


(defun main (argv)
  (dolist (arg argv)
    (princ (clean-name (translate-diacritics arg)))
    (terpri)))

(main ext:*args*)
