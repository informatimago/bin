#!/bin/bash
set -e
# TODO: Rewrite it in clisp, it has overflown bash complexity.

pname="$(basename "$0")"
gdirs=("$HOME/.config/gpull-dirs"  "$(dirname "$0")/gdirs")
for dir in "${gdirs[@]}" ; do
    if [ -r "$dir" ] ; then
        source "$dir" # should define gsets
        break
    fi
done

gvers=$(git --version|sed -e 's/git version \([0-9]*\)\..*/\1/')


# BASE="$(cd $(dirname "$0") ; cd "$(pwd -P)/../.." ; pwd -P)"

push_all_remotes=0
psets=()
goterror=0


function usage(){
    printf "\n"
    printf "%s usage:\n\n" "$pname"
    printf "  %s links  # creates the associated symlinks.\n" "$pname"
    printf "  %s sets   # display the list of gsets.\n" "$pname"
    printf "  gstat [gset]\n"
    printf "  gpull [gset] [--all-remotes]\n"
    printf "  gpush [gset] [--all-remotes]\n"
    printf "\n"
    printf "gset should be one of: \n"
    printf "             %s\n" ${gsets[@]}
    printf "\n"
}

function error(){
    goterror=1
    printf "%s error: " "$pname" 1>&2
    printf "$@"                  1>&2
    printf "\n"                  1>&2
}

function homedir(){
    local dir="$1"
    echo $dir|sed -e "s:^${HOME}/:\\\${HOME}/:" -e "s:^${HOME}\$:\\\${HOME}:"
}

case "$1" in
link|links)
    for link in gpush gstat gremotes ; do
        ln -v -s -f gpull "$(dirname "$0")/${link}"
    done
    exit 0
    ;;
sets|gsets)
    echo ${gsets[@]}
    exit 0
    ;;
clone)
    for gset in ${gsets[@]} ; do
        eval echo \${${gset}[@]}|tr ' ' '\012'
    done \
        | sort -u \
        | while read dir ; do
              echo '#'
              first=0
              ( cd $dir >/dev/null 2>&1 ; git-show-remotes ) \
                  | sed -n -e 's/ (fetch)//p' \
                  | while read name url ; do
                        dstdir="$(homedir $(dirname ${dir}))"
                        if [ $first -eq 0 ] ; then

                            echo mkdir -p ${dstdir}
                            echo cd ${dstdir}
                            echo git clone -o $name $url $(basename $dir)
                            first=1
                        else
                            echo cd ${dstdir}/$(basename $dir)
                            echo git remote add $name $url
                        fi
                    done
          done
    exit 0
    ;;
esac

for arg ; do
    case "$arg" in
    --all-remotes)
        push_all_remotes=1
        ;;
    *)
        gset="$arg"
        gotit=0
        for e in ${gsets[@]} ; do
            if [ "$gset" = "$e" ] ; then
                gotit=1
                break
            fi
        done

        if [ $gotit -eq 0 ] ; then
            error "invalid git set '%s'" "$gset"
        else
            psets=( ${psets[@]} $gset )
        fi
       ;;
    esac
done


case "$pname" in
gpull)    op=(pull) ;;
gpush)    op=(push) ;;
gstat)    op=(status --untracked-files=no) ;;
gremotes) op=(remote) ;;
*)
    error "it should be named gpull, gpush or gstat\nuse:\n\t gpull link \nto make the symlinks.\n"
    ;;
esac

if [ $goterror -ne 0 ] ; then
    usage
    exit 1
fi


if [ ${#psets} -eq 0 ] ; then
    psets=( ${gsets[0]} )
fi

for pset in ${psets[@]} ; do

    eval 'pdirs=( ${'"$pset"'[@]} )'

    for dir in "${pdirs[@]}" ; do
        (
            cd "$dir" && (
                printf "\n########################################################################"
                printf "\n### set: %s" "$pset"
                printf "\ncd %s\n" "$(pwd)"
                if [ $push_all_remotes -ne 0 ] ; then
                    case "${op[0]}" in
                    remote)
                        trap : INT
                        git-show-remotes |expand -16
                        trap INT
                        ;;
                    push)
                        printf "# pushing branch \"%s\".\n" "$(git branch |awk '/\*/{print $2}')"
                        trap : INT
                        for r in $(git remote) ; do
                            printf "%s " "$r"
                            git "${op[@]}" "$r"
                        done
                        trap INT
                        ;;
                    pull)
                        trap : INT
                        if [ $gvers -eq 1 -a $(git remote|wc -l) -eq 1 ] ; then
                            git "${op[@]}"
                        else
                            git "${op[@]}" --all
                        fi
                        trap INT
                        ;;
                    *)
                        trap : INT
                        git "${op[@]}"
                        trap INT
                        ;;
                    esac
                else
                    case "${op[0]}" in
                    remote)
                        trap : INT
                        git-show-remotes |expand -16
                        trap INT
                        ;;
                    push)
                        printf "# pushing branch \"%s\".\n" "$(git branch |awk '/*/{print $2}')"
                        trap : INT
                        git "${op[@]}"
                        trap INT
                        ;;
                    *)
                        trap : INT
                        git "${op[@]}"
                        trap INT
                        ;;
                    esac
                fi
            )
        )
    done

done
