#!/usr/bin/clisp -ansi -q -Kfull -E iso-8859-1
;;;; -*- mode:lisp;coding:utf-8 -*-
;;;;**************************************************************************
;;;;FILE:               mfod.lisp
;;;;LANGUAGE:           Common-Lisp
;;;;SYSTEM:             Common-Lisp
;;;;USER-INTERFACE:     NONE
;;;;DESCRIPTION
;;;;    
;;;;    Shows all the emacs servers available, and let the user select one
;;;;    on which to open a new frame.
;;;;    
;;;;AUTHORS
;;;;    <PJB> Pascal J. Bourguignon <pjb@informatimago.com>
;;;;MODIFICATIONS
;;;;    2010-08-30 <PJB> Translated from bash...
;;;;    2009-09-12 <PJB> Created as a bash script.
;;;;BUGS
;;;;LEGAL
;;;;    GPL
;;;;    
;;;;    Copyright Pascal J. Bourguignon 2010 - 2010
;;;;    
;;;;    This program is free software; you can redistribute it and/or
;;;;    modify it under the terms of the GNU General Public License
;;;;    as published by the Free Software Foundation; either version
;;;;    2 of the License, or (at your option) any later version.
;;;;    
;;;;    This program is distributed in the hope that it will be
;;;;    useful, but WITHOUT ANY WARRANTY; without even the implied
;;;;    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
;;;;    PURPOSE.  See the GNU General Public License for more details.
;;;;    
;;;;    You should have received a copy of the GNU General Public
;;;;    License along with this program; if not, write to the Free
;;;;    Software Foundation, Inc., 59 Temple Place, Suite 330,
;;;;    Boston, MA 02111-1307 USA
;;;;**************************************************************************
(in-package "COMMON-LISP-USER")

;; Clean the packages imported into COMMON-LISP-USER:
(MAPC (LAMBDA (package) (UNUSE-PACKAGE package "COMMON-LISP-USER"))
      (set-difference
       (COPY-SEQ (PACKAGE-USE-LIST "COMMON-LISP-USER"))
       (delete nil (list ;; A list of all the "CL" packages possible:
                    (FIND-PACKAGE "COMMON-LISP")
                    (FIND-PACKAGE "IMAGE-BASED-COMMON-LISP")))))


(load (make-pathname :name "SCRIPT" :type nil :version NIL :case :common
                      :defaults *load-pathname*))
(use-package "SCRIPT")

(setf *program-name* (pname))


;; (redirecting-stdout-to-stderr (load #p"/etc/gentoo-init.lisp"))
;; (redirecting-stdout-to-stderr
;;  (let ((*load-verbose* nil)
;;        (*compile-verbose* nil))
;;    (load (make-pathname :name ".clisprc" :type "lisp" :case :local
;;                         :defaults (user-homedir-pathname)))
;;    ;; (setf *features* (delete :testing-script *features*))
;;    ))
;; (redirecting-stdout-to-stderr (asdf:oos 'asdf:load-op :split-sequence)
;;                               (asdf:oos 'asdf:load-op :cl-ppcre))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defparameter *sockets*
  (let ((uid (posix:uid)))
    (sort
     (mapcar (function namestring)
             (remove-if-not (function probe-file)
                            (remove-duplicates
                             ;; getting server is not so useful since directory will
                             ;; return the truename...
                             (append (directory (format nil "/tmp/emacs~A/server"   uid))
                                     (directory (format nil "/tmp/emacs~A/server-*" uid)))
                             :test (function equalp))))
     (function string-lessp))))


(defparameter *frames*
  (let ((frames '()))
    (dolist (socket *sockets* (reverse frames))
      (let ((frame
              (with-open-stream (frame (ext:run-program
                                        "emacsclient"
                                        :arguments (list (format nil "--socket-name=~A" socket)
                                                         "--eval"
                                                         "(mapcar (function frame-name) (frame-list))")
                                        :output :stream))
                (read frame nil nil))))

        (if frame
            (push (list socket frame) frames)
            (multiple-value-bind (all pid) (regexp:match "^.*server-\\([0-9]\\+\\)$" socket)
              (if all
                  (let ((pid (regexp:match-string pid socket)))
                    (with-open-stream (ps (ext:run-program "ps" :arguments (list "-p" pid) :output :stream))
                      (unless (loop
                                 :named search-emacs
                                 :for line = (read-line ps nil nil)
                                 :while line
                                 :if (regexp:match "emacs" line)
                                 :do (return-from search-emacs t)
                                 :finally  (return-from search-emacs nil))
                        (delete-file socket)
                        (setf *sockets* (delete socket *sockets*))))))))))))


(when (null *frames*)
  (format t "There is no emacs server~%")
  (ext:exit 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define-option ("list" "-l" "--list") ()
  "List the available emacs servers."
  (loop
     :for i :from 1
     :for (server frames) :in *frames*
     :do (format t "~2D) ~30A ~{~A~^~%                                   ~A~}~%"
                 i server frames)))


(define-option ("select" "-s" "--select") (index)
  "Selects the server at the given index (from 1 up) as the default server."
  (let* ((index (parse-integer index))
         (uid    (posix:uid))
         (server (ignore-errors (nth (1- index) *frames*))))
    (if server
        (ext:run-program "ln" :arguments (list "-sf" (first server) (format nil "/tmp/emacs~A/server" uid)))
        (error "~A is not a server index. Please give an index between 1 and ~A"
               index (length *frames*)))))


(define-option ("open" "-o" "--open") (index)
  "Makes a new frame from the server at the given index (from 1 up) on the current DISPLAY."
  (let* ((index (parse-integer index))
         (uid    (posix:uid))
         (server (ignore-errors (nth (1- index) *frames*))))
    (if server
        (let ((display (ext:getenv "DISPLAY")))
          (if display
              (ext:run-program "emacsclient"
                               :arguments (list (format nil "--socket-name=~A" socket)
                                                "--no-wait"
                                                "--eval" (format nil "(make-frame-on-display \"~A\")" display)))
              (error "There is no DISPLAY environment variable.")))
        (error "~A is not a server index. Please give an index between 1 and ~A"
               index (length *frames*)))))


(parse-options ext:*args*)
(ext:exit 0)

